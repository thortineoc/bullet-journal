{"version":3,"sources":["Home.js","Navbar.js","Calendar.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Navbar","to","Calendar","List","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAwBeA,MArBf,WACI,OAEI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,eAAd,kBACA,uBAAGA,UAAU,qBAAb,0jBAOA,uBAAGA,UAAU,qBAAb,iY,MCKGC,MAhBf,WACI,OACI,yBAAKD,UAAU,UACX,kBAAC,IAAD,CAAME,GAAG,IAAIF,UAAU,gBACnB,4CAEJ,kBAAC,IAAD,CAAME,GAAG,YAAYF,UAAU,gBAC3B,2CAEJ,kBAAC,IAAD,CAAME,GAAG,QAAQF,UAAU,gBACvB,0CCJDG,MARf,WACI,OACI,6BACI,0CCKGC,MARf,WACI,OACI,6BACI,sCCwBGC,MArBf,WACE,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,MACA,kBAAC,EAAD,UCVQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3bda845e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\n\r\nfunction Home() {\r\n    return (\r\n\r\n        <div className=\"home\">\r\n            <h1 className=\"home__title\">Bullet journal</h1>\r\n            <p className=\"home__description\">\r\n            Welcome on this page! It's your own online bullet journal. Maybe you're wondering what \r\n            does \"Bullet journal\" mean. Bullet journals are paper notebooks where you can note all your plans, ideas, dreams.\r\n            It helps you to organize your day, month or whole year. You can feel free and write here about everything that is on your\r\n            mind. The orgins of it's name comes from the most popular pattern of pages in this notebook - bullets. I want to make you\r\n            feel free to make your notes and help you to become better organized with my page. Enjoy it and get the most out of it!\r\n            </p>\r\n            <p className=\"home__description\">\r\n            You can navigate this page using navbar at the top. Calendar allows you to save comming up events and helps with remebering\r\n            important dates. Our to-do list and daily tracker will help you with getting track of everyday task and your daily routine.\r\n            You can also make loose notes with the notepad. You are going to become more organized and won't forget about anything ðŸ˜‰\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport './Navbar.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <Link to='/' className=\"navbar__link\">\r\n                <span>Main page</span>\r\n            </Link>\r\n            <Link to='/calendar' className=\"navbar__link\">\r\n                <span>Calendar</span>\r\n            </Link>\r\n            <Link to='/list' className=\"navbar__link\">\r\n                <span>To-do</span>\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n \r\nexport default Navbar\r\n","import React from 'react';\r\n\r\nfunction Calendar() {\r\n    return (\r\n        <div>\r\n            <h1>Calendar</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar\r\n","import React from 'react';\r\n\r\nfunction List() {\r\n    return (\r\n        <div>\r\n            <h1>List</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Home from './Home';\nimport Navbar from './Navbar';\nimport Calendar from './Calendar';\nimport List from './List';\n\nfunction App() {\n  return (\n      <Router>\n        <Switch>\n          <Route path='/calendar'>\n            <Navbar />\n            <Calendar />\n          </Route>\n          <Route path='/list'>\n            <Navbar />\n            <List />\n          </Route>\n          <Route path='/'>\n            <Navbar />\n            <Home />\n          </Route>\n        </Switch>\n      </Router>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}